<?php
/**
 * ConvertDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ConvertDataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConvertDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation convertDataCsvToJson
     *
     * Convert CSV to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  bool $column_names_from_first_row Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function convertDataCsvToJson($input_file, $column_names_from_first_row = null)
    {
        list($response) = $this->convertDataCsvToJsonWithHttpInfo($input_file, $column_names_from_first_row);
        return $response;
    }

    /**
     * Operation convertDataCsvToJsonWithHttpInfo
     *
     * Convert CSV to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  bool $column_names_from_first_row Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataCsvToJsonWithHttpInfo($input_file, $column_names_from_first_row = null)
    {
        $returnType = 'object';
        $request = $this->convertDataCsvToJsonRequest($input_file, $column_names_from_first_row);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataCsvToJsonAsync
     *
     * Convert CSV to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  bool $column_names_from_first_row Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataCsvToJsonAsync($input_file, $column_names_from_first_row = null)
    {
        return $this->convertDataCsvToJsonAsyncWithHttpInfo($input_file, $column_names_from_first_row)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataCsvToJsonAsyncWithHttpInfo
     *
     * Convert CSV to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  bool $column_names_from_first_row Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataCsvToJsonAsyncWithHttpInfo($input_file, $column_names_from_first_row = null)
    {
        $returnType = 'object';
        $request = $this->convertDataCsvToJsonRequest($input_file, $column_names_from_first_row);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataCsvToJson'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     * @param  bool $column_names_from_first_row Optional; If true, the first row will be used as the labels for the columns; if false, columns will be named Column0, Column1, etc.  Default is true.  Set to false if you are not using column headings, or have an irregular column structure. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataCsvToJsonRequest($input_file, $column_names_from_first_row = null)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataCsvToJson'
            );
        }

        $resourcePath = '/convert/csv/to/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($column_names_from_first_row !== null) {
            $headerParams['columnNamesFromFirstRow'] = ObjectSerializer::toHeaderValue($column_names_from_first_row);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataJsonToXml
     *
     * Convert JSON to XML conversion
     *
     * @param  object $json_object Input JSON to convert to XML (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function convertDataJsonToXml($json_object)
    {
        list($response) = $this->convertDataJsonToXmlWithHttpInfo($json_object);
        return $response;
    }

    /**
     * Operation convertDataJsonToXmlWithHttpInfo
     *
     * Convert JSON to XML conversion
     *
     * @param  object $json_object Input JSON to convert to XML (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataJsonToXmlWithHttpInfo($json_object)
    {
        $returnType = 'string';
        $request = $this->convertDataJsonToXmlRequest($json_object);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataJsonToXmlAsync
     *
     * Convert JSON to XML conversion
     *
     * @param  object $json_object Input JSON to convert to XML (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataJsonToXmlAsync($json_object)
    {
        return $this->convertDataJsonToXmlAsyncWithHttpInfo($json_object)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataJsonToXmlAsyncWithHttpInfo
     *
     * Convert JSON to XML conversion
     *
     * @param  object $json_object Input JSON to convert to XML (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataJsonToXmlAsyncWithHttpInfo($json_object)
    {
        $returnType = 'string';
        $request = $this->convertDataJsonToXmlRequest($json_object);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataJsonToXml'
     *
     * @param  object $json_object Input JSON to convert to XML (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataJsonToXmlRequest($json_object)
    {
        // verify the required parameter 'json_object' is set
        if ($json_object === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $json_object when calling convertDataJsonToXml'
            );
        }

        $resourcePath = '/convert/json/to/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($json_object)) {
            $_tempBody = $json_object;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXlsToJson
     *
     * Convert Excel (97-2003) XLS to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function convertDataXlsToJson($input_file)
    {
        list($response) = $this->convertDataXlsToJsonWithHttpInfo($input_file);
        return $response;
    }

    /**
     * Operation convertDataXlsToJsonWithHttpInfo
     *
     * Convert Excel (97-2003) XLS to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXlsToJsonWithHttpInfo($input_file)
    {
        $returnType = 'object';
        $request = $this->convertDataXlsToJsonRequest($input_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXlsToJsonAsync
     *
     * Convert Excel (97-2003) XLS to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXlsToJsonAsync($input_file)
    {
        return $this->convertDataXlsToJsonAsyncWithHttpInfo($input_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXlsToJsonAsyncWithHttpInfo
     *
     * Convert Excel (97-2003) XLS to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXlsToJsonAsyncWithHttpInfo($input_file)
    {
        $returnType = 'object';
        $request = $this->convertDataXlsToJsonRequest($input_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXlsToJson'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXlsToJsonRequest($input_file)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXlsToJson'
            );
        }

        $resourcePath = '/convert/xls/to/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXlsxToJson
     *
     * Convert Excel XLSX to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function convertDataXlsxToJson($input_file)
    {
        list($response) = $this->convertDataXlsxToJsonWithHttpInfo($input_file);
        return $response;
    }

    /**
     * Operation convertDataXlsxToJsonWithHttpInfo
     *
     * Convert Excel XLSX to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXlsxToJsonWithHttpInfo($input_file)
    {
        $returnType = 'object';
        $request = $this->convertDataXlsxToJsonRequest($input_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXlsxToJsonAsync
     *
     * Convert Excel XLSX to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXlsxToJsonAsync($input_file)
    {
        return $this->convertDataXlsxToJsonAsyncWithHttpInfo($input_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXlsxToJsonAsyncWithHttpInfo
     *
     * Convert Excel XLSX to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXlsxToJsonAsyncWithHttpInfo($input_file)
    {
        $returnType = 'object';
        $request = $this->convertDataXlsxToJsonRequest($input_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXlsxToJson'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXlsxToJsonRequest($input_file)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXlsxToJson'
            );
        }

        $resourcePath = '/convert/xlsx/to/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlEditAddAttributeWithXPath
     *
     * Adds an attribute to all XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_attribute_name Name of the XML attribute to add (required)
     * @param  string $xml_attribute_value Value of the XML attribute to add (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlAddAttributeWithXPathResult
     */
    public function convertDataXmlEditAddAttributeWithXPath($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value)
    {
        list($response) = $this->convertDataXmlEditAddAttributeWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value);
        return $response;
    }

    /**
     * Operation convertDataXmlEditAddAttributeWithXPathWithHttpInfo
     *
     * Adds an attribute to all XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_attribute_name Name of the XML attribute to add (required)
     * @param  string $xml_attribute_value Value of the XML attribute to add (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlAddAttributeWithXPathResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlEditAddAttributeWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value)
    {
        $returnType = '\Swagger\Client\Model\XmlAddAttributeWithXPathResult';
        $request = $this->convertDataXmlEditAddAttributeWithXPathRequest($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlAddAttributeWithXPathResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlEditAddAttributeWithXPathAsync
     *
     * Adds an attribute to all XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_attribute_name Name of the XML attribute to add (required)
     * @param  string $xml_attribute_value Value of the XML attribute to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditAddAttributeWithXPathAsync($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value)
    {
        return $this->convertDataXmlEditAddAttributeWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlEditAddAttributeWithXPathAsyncWithHttpInfo
     *
     * Adds an attribute to all XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_attribute_name Name of the XML attribute to add (required)
     * @param  string $xml_attribute_value Value of the XML attribute to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditAddAttributeWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value)
    {
        $returnType = '\Swagger\Client\Model\XmlAddAttributeWithXPathResult';
        $request = $this->convertDataXmlEditAddAttributeWithXPathRequest($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlEditAddAttributeWithXPath'
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_attribute_name Name of the XML attribute to add (required)
     * @param  string $xml_attribute_value Value of the XML attribute to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlEditAddAttributeWithXPathRequest($input_file, $x_path_expression, $xml_attribute_name, $xml_attribute_value)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlEditAddAttributeWithXPath'
            );
        }
        // verify the required parameter 'x_path_expression' is set
        if ($x_path_expression === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_path_expression when calling convertDataXmlEditAddAttributeWithXPath'
            );
        }
        // verify the required parameter 'xml_attribute_name' is set
        if ($xml_attribute_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml_attribute_name when calling convertDataXmlEditAddAttributeWithXPath'
            );
        }
        // verify the required parameter 'xml_attribute_value' is set
        if ($xml_attribute_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml_attribute_value when calling convertDataXmlEditAddAttributeWithXPath'
            );
        }

        $resourcePath = '/convert/xml/edit/xpath/add-attribute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_path_expression !== null) {
            $headerParams['XPathExpression'] = ObjectSerializer::toHeaderValue($x_path_expression);
        }
        // header params
        if ($xml_attribute_name !== null) {
            $headerParams['XmlAttributeName'] = ObjectSerializer::toHeaderValue($xml_attribute_name);
        }
        // header params
        if ($xml_attribute_value !== null) {
            $headerParams['XmlAttributeValue'] = ObjectSerializer::toHeaderValue($xml_attribute_value);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlEditAddChildWithXPath
     *
     * Adds an XML node as a child to XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_to_add XML Node to add as a child (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlAddChildWithXPathResult
     */
    public function convertDataXmlEditAddChildWithXPath($input_file, $x_path_expression, $xml_node_to_add)
    {
        list($response) = $this->convertDataXmlEditAddChildWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_node_to_add);
        return $response;
    }

    /**
     * Operation convertDataXmlEditAddChildWithXPathWithHttpInfo
     *
     * Adds an XML node as a child to XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_to_add XML Node to add as a child (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlAddChildWithXPathResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlEditAddChildWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_node_to_add)
    {
        $returnType = '\Swagger\Client\Model\XmlAddChildWithXPathResult';
        $request = $this->convertDataXmlEditAddChildWithXPathRequest($input_file, $x_path_expression, $xml_node_to_add);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlAddChildWithXPathResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlEditAddChildWithXPathAsync
     *
     * Adds an XML node as a child to XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_to_add XML Node to add as a child (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditAddChildWithXPathAsync($input_file, $x_path_expression, $xml_node_to_add)
    {
        return $this->convertDataXmlEditAddChildWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_node_to_add)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlEditAddChildWithXPathAsyncWithHttpInfo
     *
     * Adds an XML node as a child to XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_to_add XML Node to add as a child (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditAddChildWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_node_to_add)
    {
        $returnType = '\Swagger\Client\Model\XmlAddChildWithXPathResult';
        $request = $this->convertDataXmlEditAddChildWithXPathRequest($input_file, $x_path_expression, $xml_node_to_add);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlEditAddChildWithXPath'
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_to_add XML Node to add as a child (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlEditAddChildWithXPathRequest($input_file, $x_path_expression, $xml_node_to_add)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlEditAddChildWithXPath'
            );
        }
        // verify the required parameter 'x_path_expression' is set
        if ($x_path_expression === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_path_expression when calling convertDataXmlEditAddChildWithXPath'
            );
        }
        // verify the required parameter 'xml_node_to_add' is set
        if ($xml_node_to_add === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml_node_to_add when calling convertDataXmlEditAddChildWithXPath'
            );
        }

        $resourcePath = '/convert/xml/edit/xpath/add-child';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_path_expression !== null) {
            $headerParams['XPathExpression'] = ObjectSerializer::toHeaderValue($x_path_expression);
        }
        // header params
        if ($xml_node_to_add !== null) {
            $headerParams['XmlNodeToAdd'] = ObjectSerializer::toHeaderValue($xml_node_to_add);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlEditRemoveAllChildNodesWithXPath
     *
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlRemoveAllChildrenWithXPathResult
     */
    public function convertDataXmlEditRemoveAllChildNodesWithXPath($input_file, $x_path_expression)
    {
        list($response) = $this->convertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo($input_file, $x_path_expression);
        return $response;
    }

    /**
     * Operation convertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo
     *
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlRemoveAllChildrenWithXPathResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo($input_file, $x_path_expression)
    {
        $returnType = '\Swagger\Client\Model\XmlRemoveAllChildrenWithXPathResult';
        $request = $this->convertDataXmlEditRemoveAllChildNodesWithXPathRequest($input_file, $x_path_expression);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlRemoveAllChildrenWithXPathResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlEditRemoveAllChildNodesWithXPathAsync
     *
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditRemoveAllChildNodesWithXPathAsync($input_file, $x_path_expression)
    {
        return $this->convertDataXmlEditRemoveAllChildNodesWithXPathAsyncWithHttpInfo($input_file, $x_path_expression)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlEditRemoveAllChildNodesWithXPathAsyncWithHttpInfo
     *
     * Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditRemoveAllChildNodesWithXPathAsyncWithHttpInfo($input_file, $x_path_expression)
    {
        $returnType = '\Swagger\Client\Model\XmlRemoveAllChildrenWithXPathResult';
        $request = $this->convertDataXmlEditRemoveAllChildNodesWithXPathRequest($input_file, $x_path_expression);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlEditRemoveAllChildNodesWithXPath'
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlEditRemoveAllChildNodesWithXPathRequest($input_file, $x_path_expression)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlEditRemoveAllChildNodesWithXPath'
            );
        }
        // verify the required parameter 'x_path_expression' is set
        if ($x_path_expression === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_path_expression when calling convertDataXmlEditRemoveAllChildNodesWithXPath'
            );
        }

        $resourcePath = '/convert/xml/edit/xpath/remove-all-children';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_path_expression !== null) {
            $headerParams['XPathExpression'] = ObjectSerializer::toHeaderValue($x_path_expression);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlEditReplaceWithXPath
     *
     * Replaces XML nodes matching XPath expression with new node
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_replacement XML Node replacement content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlReplaceWithXPathResult
     */
    public function convertDataXmlEditReplaceWithXPath($input_file, $x_path_expression, $xml_node_replacement)
    {
        list($response) = $this->convertDataXmlEditReplaceWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_node_replacement);
        return $response;
    }

    /**
     * Operation convertDataXmlEditReplaceWithXPathWithHttpInfo
     *
     * Replaces XML nodes matching XPath expression with new node
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_replacement XML Node replacement content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlReplaceWithXPathResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlEditReplaceWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_node_replacement)
    {
        $returnType = '\Swagger\Client\Model\XmlReplaceWithXPathResult';
        $request = $this->convertDataXmlEditReplaceWithXPathRequest($input_file, $x_path_expression, $xml_node_replacement);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlReplaceWithXPathResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlEditReplaceWithXPathAsync
     *
     * Replaces XML nodes matching XPath expression with new node
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_replacement XML Node replacement content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditReplaceWithXPathAsync($input_file, $x_path_expression, $xml_node_replacement)
    {
        return $this->convertDataXmlEditReplaceWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_node_replacement)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlEditReplaceWithXPathAsyncWithHttpInfo
     *
     * Replaces XML nodes matching XPath expression with new node
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_replacement XML Node replacement content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditReplaceWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_node_replacement)
    {
        $returnType = '\Swagger\Client\Model\XmlReplaceWithXPathResult';
        $request = $this->convertDataXmlEditReplaceWithXPathRequest($input_file, $x_path_expression, $xml_node_replacement);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlEditReplaceWithXPath'
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_node_replacement XML Node replacement content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlEditReplaceWithXPathRequest($input_file, $x_path_expression, $xml_node_replacement)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlEditReplaceWithXPath'
            );
        }
        // verify the required parameter 'x_path_expression' is set
        if ($x_path_expression === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_path_expression when calling convertDataXmlEditReplaceWithXPath'
            );
        }
        // verify the required parameter 'xml_node_replacement' is set
        if ($xml_node_replacement === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml_node_replacement when calling convertDataXmlEditReplaceWithXPath'
            );
        }

        $resourcePath = '/convert/xml/edit/xpath/replace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_path_expression !== null) {
            $headerParams['XPathExpression'] = ObjectSerializer::toHeaderValue($x_path_expression);
        }
        // header params
        if ($xml_node_replacement !== null) {
            $headerParams['XmlNodeReplacement'] = ObjectSerializer::toHeaderValue($xml_node_replacement);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlEditSetValueWithXPath
     *
     * Sets the value contents of XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_value XML Value to set into the matching XML nodes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlSetValueWithXPathResult
     */
    public function convertDataXmlEditSetValueWithXPath($input_file, $x_path_expression, $xml_value)
    {
        list($response) = $this->convertDataXmlEditSetValueWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_value);
        return $response;
    }

    /**
     * Operation convertDataXmlEditSetValueWithXPathWithHttpInfo
     *
     * Sets the value contents of XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_value XML Value to set into the matching XML nodes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlSetValueWithXPathResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlEditSetValueWithXPathWithHttpInfo($input_file, $x_path_expression, $xml_value)
    {
        $returnType = '\Swagger\Client\Model\XmlSetValueWithXPathResult';
        $request = $this->convertDataXmlEditSetValueWithXPathRequest($input_file, $x_path_expression, $xml_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlSetValueWithXPathResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlEditSetValueWithXPathAsync
     *
     * Sets the value contents of XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_value XML Value to set into the matching XML nodes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditSetValueWithXPathAsync($input_file, $x_path_expression, $xml_value)
    {
        return $this->convertDataXmlEditSetValueWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlEditSetValueWithXPathAsyncWithHttpInfo
     *
     * Sets the value contents of XML nodes matching XPath expression
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_value XML Value to set into the matching XML nodes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlEditSetValueWithXPathAsyncWithHttpInfo($input_file, $x_path_expression, $xml_value)
    {
        $returnType = '\Swagger\Client\Model\XmlSetValueWithXPathResult';
        $request = $this->convertDataXmlEditSetValueWithXPathRequest($input_file, $x_path_expression, $xml_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlEditSetValueWithXPath'
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  string $xml_value XML Value to set into the matching XML nodes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlEditSetValueWithXPathRequest($input_file, $x_path_expression, $xml_value)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlEditSetValueWithXPath'
            );
        }
        // verify the required parameter 'x_path_expression' is set
        if ($x_path_expression === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_path_expression when calling convertDataXmlEditSetValueWithXPath'
            );
        }
        // verify the required parameter 'xml_value' is set
        if ($xml_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml_value when calling convertDataXmlEditSetValueWithXPath'
            );
        }

        $resourcePath = '/convert/xml/edit/xpath/set-value';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_path_expression !== null) {
            $headerParams['XPathExpression'] = ObjectSerializer::toHeaderValue($x_path_expression);
        }
        // header params
        if ($xml_value !== null) {
            $headerParams['XmlValue'] = ObjectSerializer::toHeaderValue($xml_value);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlFilterWithXPath
     *
     * Filter, select XML nodes using XPath expression, get results
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlFilterWithXPathResult
     */
    public function convertDataXmlFilterWithXPath($x_path_expression, $input_file)
    {
        list($response) = $this->convertDataXmlFilterWithXPathWithHttpInfo($x_path_expression, $input_file);
        return $response;
    }

    /**
     * Operation convertDataXmlFilterWithXPathWithHttpInfo
     *
     * Filter, select XML nodes using XPath expression, get results
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlFilterWithXPathResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlFilterWithXPathWithHttpInfo($x_path_expression, $input_file)
    {
        $returnType = '\Swagger\Client\Model\XmlFilterWithXPathResult';
        $request = $this->convertDataXmlFilterWithXPathRequest($x_path_expression, $input_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlFilterWithXPathResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlFilterWithXPathAsync
     *
     * Filter, select XML nodes using XPath expression, get results
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlFilterWithXPathAsync($x_path_expression, $input_file)
    {
        return $this->convertDataXmlFilterWithXPathAsyncWithHttpInfo($x_path_expression, $input_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlFilterWithXPathAsyncWithHttpInfo
     *
     * Filter, select XML nodes using XPath expression, get results
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlFilterWithXPathAsyncWithHttpInfo($x_path_expression, $input_file)
    {
        $returnType = '\Swagger\Client\Model\XmlFilterWithXPathResult';
        $request = $this->convertDataXmlFilterWithXPathRequest($x_path_expression, $input_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlFilterWithXPath'
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlFilterWithXPathRequest($x_path_expression, $input_file)
    {
        // verify the required parameter 'x_path_expression' is set
        if ($x_path_expression === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_path_expression when calling convertDataXmlFilterWithXPath'
            );
        }
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlFilterWithXPath'
            );
        }

        $resourcePath = '/convert/xml/select/xpath';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_path_expression !== null) {
            $headerParams['XPathExpression'] = ObjectSerializer::toHeaderValue($x_path_expression);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlQueryWithXQuery
     *
     * Query an XML file using XQuery query, get results
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlQueryWithXQueryResult
     */
    public function convertDataXmlQueryWithXQuery($input_file, $x_query)
    {
        list($response) = $this->convertDataXmlQueryWithXQueryWithHttpInfo($input_file, $x_query);
        return $response;
    }

    /**
     * Operation convertDataXmlQueryWithXQueryWithHttpInfo
     *
     * Query an XML file using XQuery query, get results
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlQueryWithXQueryResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlQueryWithXQueryWithHttpInfo($input_file, $x_query)
    {
        $returnType = '\Swagger\Client\Model\XmlQueryWithXQueryResult';
        $request = $this->convertDataXmlQueryWithXQueryRequest($input_file, $x_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlQueryWithXQueryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlQueryWithXQueryAsync
     *
     * Query an XML file using XQuery query, get results
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlQueryWithXQueryAsync($input_file, $x_query)
    {
        return $this->convertDataXmlQueryWithXQueryAsyncWithHttpInfo($input_file, $x_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlQueryWithXQueryAsyncWithHttpInfo
     *
     * Query an XML file using XQuery query, get results
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlQueryWithXQueryAsyncWithHttpInfo($input_file, $x_query)
    {
        $returnType = '\Swagger\Client\Model\XmlQueryWithXQueryResult';
        $request = $this->convertDataXmlQueryWithXQueryRequest($input_file, $x_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlQueryWithXQuery'
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlQueryWithXQueryRequest($input_file, $x_query)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlQueryWithXQuery'
            );
        }
        // verify the required parameter 'x_query' is set
        if ($x_query === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_query when calling convertDataXmlQueryWithXQuery'
            );
        }

        $resourcePath = '/convert/xml/query/xquery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_query !== null) {
            $headerParams['XQuery'] = ObjectSerializer::toHeaderValue($x_query);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlQueryWithXQueryMulti
     *
     * Query multiple XML files using XQuery query, get results
     *
     * @param  \SplFileObject $input_file1 First input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param  \SplFileObject $input_file2 Second input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file3 Third input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input XML file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlQueryWithXQueryMultiResult
     */
    public function convertDataXmlQueryWithXQueryMulti($input_file1, $x_query, $input_file2 = null, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->convertDataXmlQueryWithXQueryMultiWithHttpInfo($input_file1, $x_query, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation convertDataXmlQueryWithXQueryMultiWithHttpInfo
     *
     * Query multiple XML files using XQuery query, get results
     *
     * @param  \SplFileObject $input_file1 First input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param  \SplFileObject $input_file2 Second input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file3 Third input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input XML file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlQueryWithXQueryMultiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlQueryWithXQueryMultiWithHttpInfo($input_file1, $x_query, $input_file2 = null, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = '\Swagger\Client\Model\XmlQueryWithXQueryMultiResult';
        $request = $this->convertDataXmlQueryWithXQueryMultiRequest($input_file1, $x_query, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlQueryWithXQueryMultiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlQueryWithXQueryMultiAsync
     *
     * Query multiple XML files using XQuery query, get results
     *
     * @param  \SplFileObject $input_file1 First input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param  \SplFileObject $input_file2 Second input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file3 Third input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input XML file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlQueryWithXQueryMultiAsync($input_file1, $x_query, $input_file2 = null, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->convertDataXmlQueryWithXQueryMultiAsyncWithHttpInfo($input_file1, $x_query, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlQueryWithXQueryMultiAsyncWithHttpInfo
     *
     * Query multiple XML files using XQuery query, get results
     *
     * @param  \SplFileObject $input_file1 First input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param  \SplFileObject $input_file2 Second input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file3 Third input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input XML file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlQueryWithXQueryMultiAsyncWithHttpInfo($input_file1, $x_query, $input_file2 = null, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = '\Swagger\Client\Model\XmlQueryWithXQueryMultiResult';
        $request = $this->convertDataXmlQueryWithXQueryMultiRequest($input_file1, $x_query, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlQueryWithXQueryMulti'
     *
     * @param  \SplFileObject $input_file1 First input XML file to perform the operation on. (required)
     * @param  string $x_query Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported (required)
     * @param  \SplFileObject $input_file2 Second input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file3 Third input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input XML file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input XML file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlQueryWithXQueryMultiRequest($input_file1, $x_query, $input_file2 = null, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling convertDataXmlQueryWithXQueryMulti'
            );
        }
        // verify the required parameter 'x_query' is set
        if ($x_query === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_query when calling convertDataXmlQueryWithXQueryMulti'
            );
        }

        $resourcePath = '/convert/xml/query/xquery/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_query !== null) {
            $headerParams['XQuery'] = ObjectSerializer::toHeaderValue($x_query);
        }


        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlRemoveWithXPath
     *
     * Remove, delete XML nodes and items matching XPath expression
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\XmlRemoveWithXPathResult
     */
    public function convertDataXmlRemoveWithXPath($x_path_expression, $input_file)
    {
        list($response) = $this->convertDataXmlRemoveWithXPathWithHttpInfo($x_path_expression, $input_file);
        return $response;
    }

    /**
     * Operation convertDataXmlRemoveWithXPathWithHttpInfo
     *
     * Remove, delete XML nodes and items matching XPath expression
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\XmlRemoveWithXPathResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlRemoveWithXPathWithHttpInfo($x_path_expression, $input_file)
    {
        $returnType = '\Swagger\Client\Model\XmlRemoveWithXPathResult';
        $request = $this->convertDataXmlRemoveWithXPathRequest($x_path_expression, $input_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\XmlRemoveWithXPathResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlRemoveWithXPathAsync
     *
     * Remove, delete XML nodes and items matching XPath expression
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlRemoveWithXPathAsync($x_path_expression, $input_file)
    {
        return $this->convertDataXmlRemoveWithXPathAsyncWithHttpInfo($x_path_expression, $input_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlRemoveWithXPathAsyncWithHttpInfo
     *
     * Remove, delete XML nodes and items matching XPath expression
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlRemoveWithXPathAsyncWithHttpInfo($x_path_expression, $input_file)
    {
        $returnType = '\Swagger\Client\Model\XmlRemoveWithXPathResult';
        $request = $this->convertDataXmlRemoveWithXPathRequest($x_path_expression, $input_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlRemoveWithXPath'
     *
     * @param  string $x_path_expression Valid XML XPath query expression (required)
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlRemoveWithXPathRequest($x_path_expression, $input_file)
    {
        // verify the required parameter 'x_path_expression' is set
        if ($x_path_expression === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_path_expression when calling convertDataXmlRemoveWithXPath'
            );
        }
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlRemoveWithXPath'
            );
        }

        $resourcePath = '/convert/xml/edit/xpath/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_path_expression !== null) {
            $headerParams['XPathExpression'] = ObjectSerializer::toHeaderValue($x_path_expression);
        }


        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlToJson
     *
     * Convert XML to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function convertDataXmlToJson($input_file)
    {
        list($response) = $this->convertDataXmlToJsonWithHttpInfo($input_file);
        return $response;
    }

    /**
     * Operation convertDataXmlToJsonWithHttpInfo
     *
     * Convert XML to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlToJsonWithHttpInfo($input_file)
    {
        $returnType = 'object';
        $request = $this->convertDataXmlToJsonRequest($input_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlToJsonAsync
     *
     * Convert XML to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlToJsonAsync($input_file)
    {
        return $this->convertDataXmlToJsonAsyncWithHttpInfo($input_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlToJsonAsyncWithHttpInfo
     *
     * Convert XML to JSON conversion
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlToJsonAsyncWithHttpInfo($input_file)
    {
        $returnType = 'object';
        $request = $this->convertDataXmlToJsonRequest($input_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlToJson'
     *
     * @param  \SplFileObject $input_file Input file to perform the operation on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlToJsonRequest($input_file)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlToJson'
            );
        }

        $resourcePath = '/convert/xml/to/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertDataXmlTransformWithXsltToXml
     *
     * Transform XML document file with XSLT into a new XML document
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  \SplFileObject $transform_file Input XSLT file to use to transform the input XML file. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function convertDataXmlTransformWithXsltToXml($input_file, $transform_file)
    {
        list($response) = $this->convertDataXmlTransformWithXsltToXmlWithHttpInfo($input_file, $transform_file);
        return $response;
    }

    /**
     * Operation convertDataXmlTransformWithXsltToXmlWithHttpInfo
     *
     * Transform XML document file with XSLT into a new XML document
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  \SplFileObject $transform_file Input XSLT file to use to transform the input XML file. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertDataXmlTransformWithXsltToXmlWithHttpInfo($input_file, $transform_file)
    {
        $returnType = 'string';
        $request = $this->convertDataXmlTransformWithXsltToXmlRequest($input_file, $transform_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertDataXmlTransformWithXsltToXmlAsync
     *
     * Transform XML document file with XSLT into a new XML document
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  \SplFileObject $transform_file Input XSLT file to use to transform the input XML file. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlTransformWithXsltToXmlAsync($input_file, $transform_file)
    {
        return $this->convertDataXmlTransformWithXsltToXmlAsyncWithHttpInfo($input_file, $transform_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertDataXmlTransformWithXsltToXmlAsyncWithHttpInfo
     *
     * Transform XML document file with XSLT into a new XML document
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  \SplFileObject $transform_file Input XSLT file to use to transform the input XML file. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertDataXmlTransformWithXsltToXmlAsyncWithHttpInfo($input_file, $transform_file)
    {
        $returnType = 'string';
        $request = $this->convertDataXmlTransformWithXsltToXmlRequest($input_file, $transform_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertDataXmlTransformWithXsltToXml'
     *
     * @param  \SplFileObject $input_file Input XML file to perform the operation on. (required)
     * @param  \SplFileObject $transform_file Input XSLT file to use to transform the input XML file. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertDataXmlTransformWithXsltToXmlRequest($input_file, $transform_file)
    {
        // verify the required parameter 'input_file' is set
        if ($input_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file when calling convertDataXmlTransformWithXsltToXml'
            );
        }
        // verify the required parameter 'transform_file' is set
        if ($transform_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transform_file when calling convertDataXmlTransformWithXsltToXml'
            );
        }

        $resourcePath = '/convert/xml/transform/xslt/to/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file !== null) {
            $multipart = true;
            $formParams['inputFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($input_file), 'rb');
        }
        // form params
        if ($transform_file !== null) {
            $multipart = true;
            $formParams['transformFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($transform_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
