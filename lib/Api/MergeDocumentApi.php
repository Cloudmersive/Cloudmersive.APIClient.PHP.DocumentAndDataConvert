<?php
/**
 * MergeDocumentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * MergeDocumentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MergeDocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation mergeDocumentBatchJobCreate
     *
     * Merge an array of Documents into a Single Document by Page as a Batch Job
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input input (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MergeBatchJobCreateResult
     */
    public function mergeDocumentBatchJobCreate($input)
    {
        list($response) = $this->mergeDocumentBatchJobCreateWithHttpInfo($input);
        return $response;
    }

    /**
     * Operation mergeDocumentBatchJobCreateWithHttpInfo
     *
     * Merge an array of Documents into a Single Document by Page as a Batch Job
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MergeBatchJobCreateResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentBatchJobCreateWithHttpInfo($input)
    {
        $returnType = '\Swagger\Client\Model\MergeBatchJobCreateResult';
        $request = $this->mergeDocumentBatchJobCreateRequest($input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MergeBatchJobCreateResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentBatchJobCreateAsync
     *
     * Merge an array of Documents into a Single Document by Page as a Batch Job
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentBatchJobCreateAsync($input)
    {
        return $this->mergeDocumentBatchJobCreateAsyncWithHttpInfo($input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentBatchJobCreateAsyncWithHttpInfo
     *
     * Merge an array of Documents into a Single Document by Page as a Batch Job
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentBatchJobCreateAsyncWithHttpInfo($input)
    {
        $returnType = '\Swagger\Client\Model\MergeBatchJobCreateResult';
        $request = $this->mergeDocumentBatchJobCreateRequest($input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentBatchJobCreate'
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentBatchJobCreateRequest($input)
    {
        // verify the required parameter 'input' is set
        if ($input === null || (is_array($input) && count($input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input when calling mergeDocumentBatchJobCreate'
            );
        }

        $resourcePath = '/convert/merge/batch-job/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentDocx
     *
     * Merge Two Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentDocx($input_file1, $input_file2)
    {
        list($response) = $this->mergeDocumentDocxWithHttpInfo($input_file1, $input_file2);
        return $response;
    }

    /**
     * Operation mergeDocumentDocxWithHttpInfo
     *
     * Merge Two Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentDocxWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentDocxRequest($input_file1, $input_file2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentDocxAsync
     *
     * Merge Two Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentDocxAsync($input_file1, $input_file2)
    {
        return $this->mergeDocumentDocxAsyncWithHttpInfo($input_file1, $input_file2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentDocxAsyncWithHttpInfo
     *
     * Merge Two Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentDocxAsyncWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentDocxRequest($input_file1, $input_file2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentDocx'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentDocxRequest($input_file1, $input_file2)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentDocx'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentDocx'
            );
        }

        $resourcePath = '/convert/merge/docx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentDocxMulti
     *
     * Merge Multple Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentDocxMulti($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->mergeDocumentDocxMultiWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation mergeDocumentDocxMultiWithHttpInfo
     *
     * Merge Multple Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentDocxMultiWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentDocxMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentDocxMultiAsync
     *
     * Merge Multple Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentDocxMultiAsync($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->mergeDocumentDocxMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentDocxMultiAsyncWithHttpInfo
     *
     * Merge Multple Word DOCX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentDocxMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentDocxMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentDocxMulti'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentDocxMultiRequest($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentDocxMulti'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentDocxMulti'
            );
        }

        $resourcePath = '/convert/merge/docx/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentDocxMultiArray
     *
     * Merge Multple Word DOCX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mergeDocumentDocxMultiArray($input)
    {
        list($response) = $this->mergeDocumentDocxMultiArrayWithHttpInfo($input);
        return $response;
    }

    /**
     * Operation mergeDocumentDocxMultiArrayWithHttpInfo
     *
     * Merge Multple Word DOCX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentDocxMultiArrayWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentDocxMultiArrayRequest($input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentDocxMultiArrayAsync
     *
     * Merge Multple Word DOCX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentDocxMultiArrayAsync($input)
    {
        return $this->mergeDocumentDocxMultiArrayAsyncWithHttpInfo($input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentDocxMultiArrayAsyncWithHttpInfo
     *
     * Merge Multple Word DOCX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentDocxMultiArrayAsyncWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentDocxMultiArrayRequest($input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentDocxMultiArray'
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentDocxMultiArrayRequest($input)
    {
        // verify the required parameter 'input' is set
        if ($input === null || (is_array($input) && count($input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input when calling mergeDocumentDocxMultiArray'
            );
        }

        $resourcePath = '/convert/merge/docx/multi/array';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentGetAsyncJobStatus
     *
     * Get the status and result of a Merge Document Batch Job
     *
     * @param  string $async_job_id async_job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MergeJobStatusResult
     */
    public function mergeDocumentGetAsyncJobStatus($async_job_id)
    {
        list($response) = $this->mergeDocumentGetAsyncJobStatusWithHttpInfo($async_job_id);
        return $response;
    }

    /**
     * Operation mergeDocumentGetAsyncJobStatusWithHttpInfo
     *
     * Get the status and result of a Merge Document Batch Job
     *
     * @param  string $async_job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MergeJobStatusResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentGetAsyncJobStatusWithHttpInfo($async_job_id)
    {
        $returnType = '\Swagger\Client\Model\MergeJobStatusResult';
        $request = $this->mergeDocumentGetAsyncJobStatusRequest($async_job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MergeJobStatusResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentGetAsyncJobStatusAsync
     *
     * Get the status and result of a Merge Document Batch Job
     *
     * @param  string $async_job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentGetAsyncJobStatusAsync($async_job_id)
    {
        return $this->mergeDocumentGetAsyncJobStatusAsyncWithHttpInfo($async_job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentGetAsyncJobStatusAsyncWithHttpInfo
     *
     * Get the status and result of a Merge Document Batch Job
     *
     * @param  string $async_job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentGetAsyncJobStatusAsyncWithHttpInfo($async_job_id)
    {
        $returnType = '\Swagger\Client\Model\MergeJobStatusResult';
        $request = $this->mergeDocumentGetAsyncJobStatusRequest($async_job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentGetAsyncJobStatus'
     *
     * @param  string $async_job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentGetAsyncJobStatusRequest($async_job_id)
    {
        // verify the required parameter 'async_job_id' is set
        if ($async_job_id === null || (is_array($async_job_id) && count($async_job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $async_job_id when calling mergeDocumentGetAsyncJobStatus'
            );
        }

        $resourcePath = '/convert/merge/batch-job/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($async_job_id !== null) {
            $queryParams['AsyncJobID'] = ObjectSerializer::toQueryValue($async_job_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentHtml
     *
     * Merge Two HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentHtml($input_file1, $input_file2)
    {
        list($response) = $this->mergeDocumentHtmlWithHttpInfo($input_file1, $input_file2);
        return $response;
    }

    /**
     * Operation mergeDocumentHtmlWithHttpInfo
     *
     * Merge Two HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentHtmlWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentHtmlRequest($input_file1, $input_file2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentHtmlAsync
     *
     * Merge Two HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentHtmlAsync($input_file1, $input_file2)
    {
        return $this->mergeDocumentHtmlAsyncWithHttpInfo($input_file1, $input_file2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentHtmlAsyncWithHttpInfo
     *
     * Merge Two HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentHtmlAsyncWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentHtmlRequest($input_file1, $input_file2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentHtml'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentHtmlRequest($input_file1, $input_file2)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentHtml'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentHtml'
            );
        }

        $resourcePath = '/convert/merge/html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentHtmlMulti
     *
     * Merge Multple HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentHtmlMulti($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->mergeDocumentHtmlMultiWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation mergeDocumentHtmlMultiWithHttpInfo
     *
     * Merge Multple HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentHtmlMultiWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentHtmlMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentHtmlMultiAsync
     *
     * Merge Multple HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentHtmlMultiAsync($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->mergeDocumentHtmlMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentHtmlMultiAsyncWithHttpInfo
     *
     * Merge Multple HTML (HTM) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentHtmlMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentHtmlMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentHtmlMulti'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentHtmlMultiRequest($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentHtmlMulti'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentHtmlMulti'
            );
        }

        $resourcePath = '/convert/merge/html/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentHtmlMultiArray
     *
     * Merge Multple HTML (HTM) Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mergeDocumentHtmlMultiArray($input)
    {
        list($response) = $this->mergeDocumentHtmlMultiArrayWithHttpInfo($input);
        return $response;
    }

    /**
     * Operation mergeDocumentHtmlMultiArrayWithHttpInfo
     *
     * Merge Multple HTML (HTM) Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentHtmlMultiArrayWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentHtmlMultiArrayRequest($input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentHtmlMultiArrayAsync
     *
     * Merge Multple HTML (HTM) Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentHtmlMultiArrayAsync($input)
    {
        return $this->mergeDocumentHtmlMultiArrayAsyncWithHttpInfo($input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentHtmlMultiArrayAsyncWithHttpInfo
     *
     * Merge Multple HTML (HTM) Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentHtmlMultiArrayAsyncWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentHtmlMultiArrayRequest($input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentHtmlMultiArray'
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentHtmlMultiArrayRequest($input)
    {
        // verify the required parameter 'input' is set
        if ($input === null || (is_array($input) && count($input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input when calling mergeDocumentHtmlMultiArray'
            );
        }

        $resourcePath = '/convert/merge/html/multi/array';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPdf
     *
     * Merge Two PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentPdf($input_file1, $input_file2)
    {
        list($response) = $this->mergeDocumentPdfWithHttpInfo($input_file1, $input_file2);
        return $response;
    }

    /**
     * Operation mergeDocumentPdfWithHttpInfo
     *
     * Merge Two PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPdfWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPdfRequest($input_file1, $input_file2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPdfAsync
     *
     * Merge Two PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPdfAsync($input_file1, $input_file2)
    {
        return $this->mergeDocumentPdfAsyncWithHttpInfo($input_file1, $input_file2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPdfAsyncWithHttpInfo
     *
     * Merge Two PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPdfAsyncWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPdfRequest($input_file1, $input_file2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPdf'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPdfRequest($input_file1, $input_file2)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentPdf'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentPdf'
            );
        }

        $resourcePath = '/convert/merge/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPdfMulti
     *
     * Merge Multple PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentPdfMulti($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->mergeDocumentPdfMultiWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation mergeDocumentPdfMultiWithHttpInfo
     *
     * Merge Multple PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPdfMultiWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPdfMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPdfMultiAsync
     *
     * Merge Multple PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPdfMultiAsync($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->mergeDocumentPdfMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPdfMultiAsyncWithHttpInfo
     *
     * Merge Multple PDF Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPdfMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPdfMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPdfMulti'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPdfMultiRequest($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentPdfMulti'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentPdfMulti'
            );
        }

        $resourcePath = '/convert/merge/pdf/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPdfMultiArray
     *
     * Merge Multple PDF Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mergeDocumentPdfMultiArray($input)
    {
        list($response) = $this->mergeDocumentPdfMultiArrayWithHttpInfo($input);
        return $response;
    }

    /**
     * Operation mergeDocumentPdfMultiArrayWithHttpInfo
     *
     * Merge Multple PDF Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPdfMultiArrayWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentPdfMultiArrayRequest($input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPdfMultiArrayAsync
     *
     * Merge Multple PDF Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPdfMultiArrayAsync($input)
    {
        return $this->mergeDocumentPdfMultiArrayAsyncWithHttpInfo($input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPdfMultiArrayAsyncWithHttpInfo
     *
     * Merge Multple PDF Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPdfMultiArrayAsyncWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentPdfMultiArrayRequest($input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPdfMultiArray'
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPdfMultiArrayRequest($input)
    {
        // verify the required parameter 'input' is set
        if ($input === null || (is_array($input) && count($input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input when calling mergeDocumentPdfMultiArray'
            );
        }

        $resourcePath = '/convert/merge/pdf/multi/array';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPng
     *
     * Merge Two PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentPng($input_file1, $input_file2)
    {
        list($response) = $this->mergeDocumentPngWithHttpInfo($input_file1, $input_file2);
        return $response;
    }

    /**
     * Operation mergeDocumentPngWithHttpInfo
     *
     * Merge Two PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPngWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPngRequest($input_file1, $input_file2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPngAsync
     *
     * Merge Two PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPngAsync($input_file1, $input_file2)
    {
        return $this->mergeDocumentPngAsyncWithHttpInfo($input_file1, $input_file2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPngAsyncWithHttpInfo
     *
     * Merge Two PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPngAsyncWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPngRequest($input_file1, $input_file2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPng'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPngRequest($input_file1, $input_file2)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentPng'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentPng'
            );
        }

        $resourcePath = '/convert/merge/png/vertical';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPngMulti
     *
     * Merge Multple PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentPngMulti($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->mergeDocumentPngMultiWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation mergeDocumentPngMultiWithHttpInfo
     *
     * Merge Multple PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPngMultiWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPngMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPngMultiAsync
     *
     * Merge Multple PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPngMultiAsync($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->mergeDocumentPngMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPngMultiAsyncWithHttpInfo
     *
     * Merge Multple PNG Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPngMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPngMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPngMulti'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPngMultiRequest($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentPngMulti'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentPngMulti'
            );
        }

        $resourcePath = '/convert/merge/png/vertical/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPngMultiArray
     *
     * Merge Multple PNG Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mergeDocumentPngMultiArray($input)
    {
        list($response) = $this->mergeDocumentPngMultiArrayWithHttpInfo($input);
        return $response;
    }

    /**
     * Operation mergeDocumentPngMultiArrayWithHttpInfo
     *
     * Merge Multple PNG Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPngMultiArrayWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentPngMultiArrayRequest($input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPngMultiArrayAsync
     *
     * Merge Multple PNG Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPngMultiArrayAsync($input)
    {
        return $this->mergeDocumentPngMultiArrayAsyncWithHttpInfo($input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPngMultiArrayAsyncWithHttpInfo
     *
     * Merge Multple PNG Files Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPngMultiArrayAsyncWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentPngMultiArrayRequest($input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPngMultiArray'
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPngMultiArrayRequest($input)
    {
        // verify the required parameter 'input' is set
        if ($input === null || (is_array($input) && count($input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input when calling mergeDocumentPngMultiArray'
            );
        }

        $resourcePath = '/convert/merge/png/vertical/multi/array';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPptx
     *
     * Merge Two PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentPptx($input_file1, $input_file2)
    {
        list($response) = $this->mergeDocumentPptxWithHttpInfo($input_file1, $input_file2);
        return $response;
    }

    /**
     * Operation mergeDocumentPptxWithHttpInfo
     *
     * Merge Two PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPptxWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPptxRequest($input_file1, $input_file2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPptxAsync
     *
     * Merge Two PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPptxAsync($input_file1, $input_file2)
    {
        return $this->mergeDocumentPptxAsyncWithHttpInfo($input_file1, $input_file2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPptxAsyncWithHttpInfo
     *
     * Merge Two PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPptxAsyncWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPptxRequest($input_file1, $input_file2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPptx'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPptxRequest($input_file1, $input_file2)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentPptx'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentPptx'
            );
        }

        $resourcePath = '/convert/merge/pptx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPptxMulti
     *
     * Merge Multple PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentPptxMulti($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->mergeDocumentPptxMultiWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation mergeDocumentPptxMultiWithHttpInfo
     *
     * Merge Multple PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPptxMultiWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPptxMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPptxMultiAsync
     *
     * Merge Multple PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPptxMultiAsync($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->mergeDocumentPptxMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPptxMultiAsyncWithHttpInfo
     *
     * Merge Multple PowerPoint PPTX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPptxMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentPptxMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPptxMulti'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPptxMultiRequest($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentPptxMulti'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentPptxMulti'
            );
        }

        $resourcePath = '/convert/merge/pptx/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentPptxMultiArray
     *
     * Merge Multple PowerPoint PPTX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mergeDocumentPptxMultiArray($input)
    {
        list($response) = $this->mergeDocumentPptxMultiArrayWithHttpInfo($input);
        return $response;
    }

    /**
     * Operation mergeDocumentPptxMultiArrayWithHttpInfo
     *
     * Merge Multple PowerPoint PPTX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentPptxMultiArrayWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentPptxMultiArrayRequest($input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentPptxMultiArrayAsync
     *
     * Merge Multple PowerPoint PPTX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPptxMultiArrayAsync($input)
    {
        return $this->mergeDocumentPptxMultiArrayAsyncWithHttpInfo($input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentPptxMultiArrayAsyncWithHttpInfo
     *
     * Merge Multple PowerPoint PPTX Together from an array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentPptxMultiArrayAsyncWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentPptxMultiArrayRequest($input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentPptxMultiArray'
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentPptxMultiArrayRequest($input)
    {
        // verify the required parameter 'input' is set
        if ($input === null || (is_array($input) && count($input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input when calling mergeDocumentPptxMultiArray'
            );
        }

        $resourcePath = '/convert/merge/pptx/multi/array';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentTxt
     *
     * Merge Two Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mergeDocumentTxt($input_file1, $input_file2)
    {
        list($response) = $this->mergeDocumentTxtWithHttpInfo($input_file1, $input_file2);
        return $response;
    }

    /**
     * Operation mergeDocumentTxtWithHttpInfo
     *
     * Merge Two Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentTxtWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentTxtRequest($input_file1, $input_file2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentTxtAsync
     *
     * Merge Two Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentTxtAsync($input_file1, $input_file2)
    {
        return $this->mergeDocumentTxtAsyncWithHttpInfo($input_file1, $input_file2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentTxtAsyncWithHttpInfo
     *
     * Merge Two Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentTxtAsyncWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentTxtRequest($input_file1, $input_file2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentTxt'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentTxtRequest($input_file1, $input_file2)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentTxt'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentTxt'
            );
        }

        $resourcePath = '/convert/merge/txt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentTxtMulti
     *
     * Merge Multple Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentTxtMulti($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->mergeDocumentTxtMultiWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation mergeDocumentTxtMultiWithHttpInfo
     *
     * Merge Multple Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentTxtMultiWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentTxtMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentTxtMultiAsync
     *
     * Merge Multple Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentTxtMultiAsync($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->mergeDocumentTxtMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentTxtMultiAsyncWithHttpInfo
     *
     * Merge Multple Text (TXT) Files Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentTxtMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentTxtMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentTxtMulti'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentTxtMultiRequest($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentTxtMulti'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentTxtMulti'
            );
        }

        $resourcePath = '/convert/merge/txt/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentXlsx
     *
     * Merge Two Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentXlsx($input_file1, $input_file2)
    {
        list($response) = $this->mergeDocumentXlsxWithHttpInfo($input_file1, $input_file2);
        return $response;
    }

    /**
     * Operation mergeDocumentXlsxWithHttpInfo
     *
     * Merge Two Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentXlsxWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentXlsxRequest($input_file1, $input_file2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentXlsxAsync
     *
     * Merge Two Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentXlsxAsync($input_file1, $input_file2)
    {
        return $this->mergeDocumentXlsxAsyncWithHttpInfo($input_file1, $input_file2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentXlsxAsyncWithHttpInfo
     *
     * Merge Two Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentXlsxAsyncWithHttpInfo($input_file1, $input_file2)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentXlsxRequest($input_file1, $input_file2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentXlsx'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on (more than 2 can be supplied). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentXlsxRequest($input_file1, $input_file2)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentXlsx'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentXlsx'
            );
        }

        $resourcePath = '/convert/merge/xlsx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentXlsxMulti
     *
     * Merge Multple Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function mergeDocumentXlsxMulti($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        list($response) = $this->mergeDocumentXlsxMultiWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);
        return $response;
    }

    /**
     * Operation mergeDocumentXlsxMultiWithHttpInfo
     *
     * Merge Multple Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentXlsxMultiWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentXlsxMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentXlsxMultiAsync
     *
     * Merge Multple Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentXlsxMultiAsync($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        return $this->mergeDocumentXlsxMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentXlsxMultiAsyncWithHttpInfo
     *
     * Merge Multple Excel XLSX Together
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentXlsxMultiAsyncWithHttpInfo($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        $returnType = 'string';
        $request = $this->mergeDocumentXlsxMultiRequest($input_file1, $input_file2, $input_file3, $input_file4, $input_file5, $input_file6, $input_file7, $input_file8, $input_file9, $input_file10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentXlsxMulti'
     *
     * @param  \SplFileObject $input_file1 First input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file2 Second input file to perform the operation on. (required)
     * @param  \SplFileObject $input_file3 Third input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file4 Fourth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file5 Fifth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file6 Sixth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file7 Seventh input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file8 Eighth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file9 Ninth input file to perform the operation on. (optional)
     * @param  \SplFileObject $input_file10 Tenth input file to perform the operation on. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentXlsxMultiRequest($input_file1, $input_file2, $input_file3 = null, $input_file4 = null, $input_file5 = null, $input_file6 = null, $input_file7 = null, $input_file8 = null, $input_file9 = null, $input_file10 = null)
    {
        // verify the required parameter 'input_file1' is set
        if ($input_file1 === null || (is_array($input_file1) && count($input_file1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file1 when calling mergeDocumentXlsxMulti'
            );
        }
        // verify the required parameter 'input_file2' is set
        if ($input_file2 === null || (is_array($input_file2) && count($input_file2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input_file2 when calling mergeDocumentXlsxMulti'
            );
        }

        $resourcePath = '/convert/merge/xlsx/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($input_file1 !== null) {
            $multipart = true;
            $formParams['inputFile1'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file1), 'rb');
        }
        // form params
        if ($input_file2 !== null) {
            $multipart = true;
            $formParams['inputFile2'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file2), 'rb');
        }
        // form params
        if ($input_file3 !== null) {
            $multipart = true;
            $formParams['inputFile3'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file3), 'rb');
        }
        // form params
        if ($input_file4 !== null) {
            $multipart = true;
            $formParams['inputFile4'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file4), 'rb');
        }
        // form params
        if ($input_file5 !== null) {
            $multipart = true;
            $formParams['inputFile5'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file5), 'rb');
        }
        // form params
        if ($input_file6 !== null) {
            $multipart = true;
            $formParams['inputFile6'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file6), 'rb');
        }
        // form params
        if ($input_file7 !== null) {
            $multipart = true;
            $formParams['inputFile7'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file7), 'rb');
        }
        // form params
        if ($input_file8 !== null) {
            $multipart = true;
            $formParams['inputFile8'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file8), 'rb');
        }
        // form params
        if ($input_file9 !== null) {
            $multipart = true;
            $formParams['inputFile9'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file9), 'rb');
        }
        // form params
        if ($input_file10 !== null) {
            $multipart = true;
            $formParams['inputFile10'] = \GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($input_file10), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeDocumentXlsxMultiArray
     *
     * Merge Multple Excel XLSX Together from an Array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mergeDocumentXlsxMultiArray($input)
    {
        list($response) = $this->mergeDocumentXlsxMultiArrayWithHttpInfo($input);
        return $response;
    }

    /**
     * Operation mergeDocumentXlsxMultiArrayWithHttpInfo
     *
     * Merge Multple Excel XLSX Together from an Array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeDocumentXlsxMultiArrayWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentXlsxMultiArrayRequest($input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeDocumentXlsxMultiArrayAsync
     *
     * Merge Multple Excel XLSX Together from an Array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentXlsxMultiArrayAsync($input)
    {
        return $this->mergeDocumentXlsxMultiArrayAsyncWithHttpInfo($input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeDocumentXlsxMultiArrayAsyncWithHttpInfo
     *
     * Merge Multple Excel XLSX Together from an Array
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeDocumentXlsxMultiArrayAsyncWithHttpInfo($input)
    {
        $returnType = 'object';
        $request = $this->mergeDocumentXlsxMultiArrayRequest($input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeDocumentXlsxMultiArray'
     *
     * @param  \Swagger\Client\Model\DocumentArrayInput $input Array of input files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeDocumentXlsxMultiArrayRequest($input)
    {
        // verify the required parameter 'input' is set
        if ($input === null || (is_array($input) && count($input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $input when calling mergeDocumentXlsxMultiArray'
            );
        }

        $resourcePath = '/convert/merge/xlsx/multi/array';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
