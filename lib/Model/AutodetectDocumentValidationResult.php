<?php
/**
 * AutodetectDocumentValidationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AutodetectDocumentValidationResult Class Doc Comment
 *
 * @category Class
 * @description Document validation result
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AutodetectDocumentValidationResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AutodetectDocumentValidationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_format_extension' => 'string',
        'document_is_valid' => 'bool',
        'error_count' => 'int',
        'warning_count' => 'int',
        'errors_and_warnings' => '\Swagger\Client\Model\DocumentValidationError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_format_extension' => null,
        'document_is_valid' => null,
        'error_count' => 'int32',
        'warning_count' => 'int32',
        'errors_and_warnings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_format_extension' => 'FileFormatExtension',
        'document_is_valid' => 'DocumentIsValid',
        'error_count' => 'ErrorCount',
        'warning_count' => 'WarningCount',
        'errors_and_warnings' => 'ErrorsAndWarnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_format_extension' => 'setFileFormatExtension',
        'document_is_valid' => 'setDocumentIsValid',
        'error_count' => 'setErrorCount',
        'warning_count' => 'setWarningCount',
        'errors_and_warnings' => 'setErrorsAndWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_format_extension' => 'getFileFormatExtension',
        'document_is_valid' => 'getDocumentIsValid',
        'error_count' => 'getErrorCount',
        'warning_count' => 'getWarningCount',
        'errors_and_warnings' => 'getErrorsAndWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_format_extension'] = isset($data['file_format_extension']) ? $data['file_format_extension'] : null;
        $this->container['document_is_valid'] = isset($data['document_is_valid']) ? $data['document_is_valid'] : null;
        $this->container['error_count'] = isset($data['error_count']) ? $data['error_count'] : null;
        $this->container['warning_count'] = isset($data['warning_count']) ? $data['warning_count'] : null;
        $this->container['errors_and_warnings'] = isset($data['errors_and_warnings']) ? $data['errors_and_warnings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets file_format_extension
     *
     * @return string
     */
    public function getFileFormatExtension()
    {
        return $this->container['file_format_extension'];
    }

    /**
     * Sets file_format_extension
     *
     * @param string $file_format_extension file_format_extension
     *
     * @return $this
     */
    public function setFileFormatExtension($file_format_extension)
    {
        $this->container['file_format_extension'] = $file_format_extension;

        return $this;
    }

    /**
     * Gets document_is_valid
     *
     * @return bool
     */
    public function getDocumentIsValid()
    {
        return $this->container['document_is_valid'];
    }

    /**
     * Sets document_is_valid
     *
     * @param bool $document_is_valid True if the document is valid and has no errors, false otherwise
     *
     * @return $this
     */
    public function setDocumentIsValid($document_is_valid)
    {
        $this->container['document_is_valid'] = $document_is_valid;

        return $this;
    }

    /**
     * Gets error_count
     *
     * @return int
     */
    public function getErrorCount()
    {
        return $this->container['error_count'];
    }

    /**
     * Sets error_count
     *
     * @param int $error_count Number of validation errors found in the document
     *
     * @return $this
     */
    public function setErrorCount($error_count)
    {
        $this->container['error_count'] = $error_count;

        return $this;
    }

    /**
     * Gets warning_count
     *
     * @return int
     */
    public function getWarningCount()
    {
        return $this->container['warning_count'];
    }

    /**
     * Sets warning_count
     *
     * @param int $warning_count Number of validation warnings found in the document
     *
     * @return $this
     */
    public function setWarningCount($warning_count)
    {
        $this->container['warning_count'] = $warning_count;

        return $this;
    }

    /**
     * Gets errors_and_warnings
     *
     * @return \Swagger\Client\Model\DocumentValidationError[]
     */
    public function getErrorsAndWarnings()
    {
        return $this->container['errors_and_warnings'];
    }

    /**
     * Sets errors_and_warnings
     *
     * @param \Swagger\Client\Model\DocumentValidationError[] $errors_and_warnings Details of errors and warnings found
     *
     * @return $this
     */
    public function setErrorsAndWarnings($errors_and_warnings)
    {
        $this->container['errors_and_warnings'] = $errors_and_warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


