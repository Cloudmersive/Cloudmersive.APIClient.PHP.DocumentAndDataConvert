<?php
/**
 * DocxTable
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocxTable Class Doc Comment
 *
 * @category Class
 * @description A table in a Word Document (DOCX) file
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocxTable implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocxTable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'table_id' => 'string',
        'path' => 'string',
        'width' => 'string',
        'width_type' => 'string',
        'table_rows' => '\Swagger\Client\Model\DocxTableRow[]',
        'top_border_type' => 'string',
        'top_border_size' => 'int',
        'top_border_space' => 'int',
        'top_border_color' => 'string',
        'bottom_border_type' => 'string',
        'bottom_border_size' => 'int',
        'bottom_border_space' => 'int',
        'bottom_border_color' => 'string',
        'left_border_type' => 'string',
        'left_border_size' => 'int',
        'left_border_space' => 'int',
        'left_border_color' => 'string',
        'right_border_type' => 'string',
        'right_border_size' => 'int',
        'right_border_space' => 'int',
        'right_border_color' => 'string',
        'cell_horizontal_border_type' => 'string',
        'cell_horizontal_border_size' => 'int',
        'cell_horizontal_border_space' => 'int',
        'cell_horizontal_border_color' => 'string',
        'cell_vertical_border_type' => 'string',
        'cell_vertical_border_size' => 'int',
        'cell_vertical_border_space' => 'int',
        'cell_vertical_border_color' => 'string',
        'start_border_type' => 'string',
        'start_border_size' => 'int',
        'start_border_space' => 'int',
        'start_border_color' => 'string',
        'end_border_type' => 'string',
        'end_border_size' => 'int',
        'end_border_space' => 'int',
        'end_border_color' => 'string',
        'table_indentation_mode' => 'string',
        'table_indentation_width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'table_id' => null,
        'path' => null,
        'width' => null,
        'width_type' => null,
        'table_rows' => null,
        'top_border_type' => null,
        'top_border_size' => 'int32',
        'top_border_space' => 'int32',
        'top_border_color' => null,
        'bottom_border_type' => null,
        'bottom_border_size' => 'int32',
        'bottom_border_space' => 'int32',
        'bottom_border_color' => null,
        'left_border_type' => null,
        'left_border_size' => 'int32',
        'left_border_space' => 'int32',
        'left_border_color' => null,
        'right_border_type' => null,
        'right_border_size' => 'int32',
        'right_border_space' => 'int32',
        'right_border_color' => null,
        'cell_horizontal_border_type' => null,
        'cell_horizontal_border_size' => 'int32',
        'cell_horizontal_border_space' => 'int32',
        'cell_horizontal_border_color' => null,
        'cell_vertical_border_type' => null,
        'cell_vertical_border_size' => 'int32',
        'cell_vertical_border_space' => 'int32',
        'cell_vertical_border_color' => null,
        'start_border_type' => null,
        'start_border_size' => 'int32',
        'start_border_space' => 'int32',
        'start_border_color' => null,
        'end_border_type' => null,
        'end_border_size' => 'int32',
        'end_border_space' => 'int32',
        'end_border_color' => null,
        'table_indentation_mode' => null,
        'table_indentation_width' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'table_id' => 'TableID',
        'path' => 'Path',
        'width' => 'Width',
        'width_type' => 'WidthType',
        'table_rows' => 'TableRows',
        'top_border_type' => 'TopBorderType',
        'top_border_size' => 'TopBorderSize',
        'top_border_space' => 'TopBorderSpace',
        'top_border_color' => 'TopBorderColor',
        'bottom_border_type' => 'BottomBorderType',
        'bottom_border_size' => 'BottomBorderSize',
        'bottom_border_space' => 'BottomBorderSpace',
        'bottom_border_color' => 'BottomBorderColor',
        'left_border_type' => 'LeftBorderType',
        'left_border_size' => 'LeftBorderSize',
        'left_border_space' => 'LeftBorderSpace',
        'left_border_color' => 'LeftBorderColor',
        'right_border_type' => 'RightBorderType',
        'right_border_size' => 'RightBorderSize',
        'right_border_space' => 'RightBorderSpace',
        'right_border_color' => 'RightBorderColor',
        'cell_horizontal_border_type' => 'CellHorizontalBorderType',
        'cell_horizontal_border_size' => 'CellHorizontalBorderSize',
        'cell_horizontal_border_space' => 'CellHorizontalBorderSpace',
        'cell_horizontal_border_color' => 'CellHorizontalBorderColor',
        'cell_vertical_border_type' => 'CellVerticalBorderType',
        'cell_vertical_border_size' => 'CellVerticalBorderSize',
        'cell_vertical_border_space' => 'CellVerticalBorderSpace',
        'cell_vertical_border_color' => 'CellVerticalBorderColor',
        'start_border_type' => 'StartBorderType',
        'start_border_size' => 'StartBorderSize',
        'start_border_space' => 'StartBorderSpace',
        'start_border_color' => 'StartBorderColor',
        'end_border_type' => 'EndBorderType',
        'end_border_size' => 'EndBorderSize',
        'end_border_space' => 'EndBorderSpace',
        'end_border_color' => 'EndBorderColor',
        'table_indentation_mode' => 'TableIndentationMode',
        'table_indentation_width' => 'TableIndentationWidth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'table_id' => 'setTableId',
        'path' => 'setPath',
        'width' => 'setWidth',
        'width_type' => 'setWidthType',
        'table_rows' => 'setTableRows',
        'top_border_type' => 'setTopBorderType',
        'top_border_size' => 'setTopBorderSize',
        'top_border_space' => 'setTopBorderSpace',
        'top_border_color' => 'setTopBorderColor',
        'bottom_border_type' => 'setBottomBorderType',
        'bottom_border_size' => 'setBottomBorderSize',
        'bottom_border_space' => 'setBottomBorderSpace',
        'bottom_border_color' => 'setBottomBorderColor',
        'left_border_type' => 'setLeftBorderType',
        'left_border_size' => 'setLeftBorderSize',
        'left_border_space' => 'setLeftBorderSpace',
        'left_border_color' => 'setLeftBorderColor',
        'right_border_type' => 'setRightBorderType',
        'right_border_size' => 'setRightBorderSize',
        'right_border_space' => 'setRightBorderSpace',
        'right_border_color' => 'setRightBorderColor',
        'cell_horizontal_border_type' => 'setCellHorizontalBorderType',
        'cell_horizontal_border_size' => 'setCellHorizontalBorderSize',
        'cell_horizontal_border_space' => 'setCellHorizontalBorderSpace',
        'cell_horizontal_border_color' => 'setCellHorizontalBorderColor',
        'cell_vertical_border_type' => 'setCellVerticalBorderType',
        'cell_vertical_border_size' => 'setCellVerticalBorderSize',
        'cell_vertical_border_space' => 'setCellVerticalBorderSpace',
        'cell_vertical_border_color' => 'setCellVerticalBorderColor',
        'start_border_type' => 'setStartBorderType',
        'start_border_size' => 'setStartBorderSize',
        'start_border_space' => 'setStartBorderSpace',
        'start_border_color' => 'setStartBorderColor',
        'end_border_type' => 'setEndBorderType',
        'end_border_size' => 'setEndBorderSize',
        'end_border_space' => 'setEndBorderSpace',
        'end_border_color' => 'setEndBorderColor',
        'table_indentation_mode' => 'setTableIndentationMode',
        'table_indentation_width' => 'setTableIndentationWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'table_id' => 'getTableId',
        'path' => 'getPath',
        'width' => 'getWidth',
        'width_type' => 'getWidthType',
        'table_rows' => 'getTableRows',
        'top_border_type' => 'getTopBorderType',
        'top_border_size' => 'getTopBorderSize',
        'top_border_space' => 'getTopBorderSpace',
        'top_border_color' => 'getTopBorderColor',
        'bottom_border_type' => 'getBottomBorderType',
        'bottom_border_size' => 'getBottomBorderSize',
        'bottom_border_space' => 'getBottomBorderSpace',
        'bottom_border_color' => 'getBottomBorderColor',
        'left_border_type' => 'getLeftBorderType',
        'left_border_size' => 'getLeftBorderSize',
        'left_border_space' => 'getLeftBorderSpace',
        'left_border_color' => 'getLeftBorderColor',
        'right_border_type' => 'getRightBorderType',
        'right_border_size' => 'getRightBorderSize',
        'right_border_space' => 'getRightBorderSpace',
        'right_border_color' => 'getRightBorderColor',
        'cell_horizontal_border_type' => 'getCellHorizontalBorderType',
        'cell_horizontal_border_size' => 'getCellHorizontalBorderSize',
        'cell_horizontal_border_space' => 'getCellHorizontalBorderSpace',
        'cell_horizontal_border_color' => 'getCellHorizontalBorderColor',
        'cell_vertical_border_type' => 'getCellVerticalBorderType',
        'cell_vertical_border_size' => 'getCellVerticalBorderSize',
        'cell_vertical_border_space' => 'getCellVerticalBorderSpace',
        'cell_vertical_border_color' => 'getCellVerticalBorderColor',
        'start_border_type' => 'getStartBorderType',
        'start_border_size' => 'getStartBorderSize',
        'start_border_space' => 'getStartBorderSpace',
        'start_border_color' => 'getStartBorderColor',
        'end_border_type' => 'getEndBorderType',
        'end_border_size' => 'getEndBorderSize',
        'end_border_space' => 'getEndBorderSpace',
        'end_border_color' => 'getEndBorderColor',
        'table_indentation_mode' => 'getTableIndentationMode',
        'table_indentation_width' => 'getTableIndentationWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['table_id'] = isset($data['table_id']) ? $data['table_id'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['width_type'] = isset($data['width_type']) ? $data['width_type'] : null;
        $this->container['table_rows'] = isset($data['table_rows']) ? $data['table_rows'] : null;
        $this->container['top_border_type'] = isset($data['top_border_type']) ? $data['top_border_type'] : null;
        $this->container['top_border_size'] = isset($data['top_border_size']) ? $data['top_border_size'] : null;
        $this->container['top_border_space'] = isset($data['top_border_space']) ? $data['top_border_space'] : null;
        $this->container['top_border_color'] = isset($data['top_border_color']) ? $data['top_border_color'] : null;
        $this->container['bottom_border_type'] = isset($data['bottom_border_type']) ? $data['bottom_border_type'] : null;
        $this->container['bottom_border_size'] = isset($data['bottom_border_size']) ? $data['bottom_border_size'] : null;
        $this->container['bottom_border_space'] = isset($data['bottom_border_space']) ? $data['bottom_border_space'] : null;
        $this->container['bottom_border_color'] = isset($data['bottom_border_color']) ? $data['bottom_border_color'] : null;
        $this->container['left_border_type'] = isset($data['left_border_type']) ? $data['left_border_type'] : null;
        $this->container['left_border_size'] = isset($data['left_border_size']) ? $data['left_border_size'] : null;
        $this->container['left_border_space'] = isset($data['left_border_space']) ? $data['left_border_space'] : null;
        $this->container['left_border_color'] = isset($data['left_border_color']) ? $data['left_border_color'] : null;
        $this->container['right_border_type'] = isset($data['right_border_type']) ? $data['right_border_type'] : null;
        $this->container['right_border_size'] = isset($data['right_border_size']) ? $data['right_border_size'] : null;
        $this->container['right_border_space'] = isset($data['right_border_space']) ? $data['right_border_space'] : null;
        $this->container['right_border_color'] = isset($data['right_border_color']) ? $data['right_border_color'] : null;
        $this->container['cell_horizontal_border_type'] = isset($data['cell_horizontal_border_type']) ? $data['cell_horizontal_border_type'] : null;
        $this->container['cell_horizontal_border_size'] = isset($data['cell_horizontal_border_size']) ? $data['cell_horizontal_border_size'] : null;
        $this->container['cell_horizontal_border_space'] = isset($data['cell_horizontal_border_space']) ? $data['cell_horizontal_border_space'] : null;
        $this->container['cell_horizontal_border_color'] = isset($data['cell_horizontal_border_color']) ? $data['cell_horizontal_border_color'] : null;
        $this->container['cell_vertical_border_type'] = isset($data['cell_vertical_border_type']) ? $data['cell_vertical_border_type'] : null;
        $this->container['cell_vertical_border_size'] = isset($data['cell_vertical_border_size']) ? $data['cell_vertical_border_size'] : null;
        $this->container['cell_vertical_border_space'] = isset($data['cell_vertical_border_space']) ? $data['cell_vertical_border_space'] : null;
        $this->container['cell_vertical_border_color'] = isset($data['cell_vertical_border_color']) ? $data['cell_vertical_border_color'] : null;
        $this->container['start_border_type'] = isset($data['start_border_type']) ? $data['start_border_type'] : null;
        $this->container['start_border_size'] = isset($data['start_border_size']) ? $data['start_border_size'] : null;
        $this->container['start_border_space'] = isset($data['start_border_space']) ? $data['start_border_space'] : null;
        $this->container['start_border_color'] = isset($data['start_border_color']) ? $data['start_border_color'] : null;
        $this->container['end_border_type'] = isset($data['end_border_type']) ? $data['end_border_type'] : null;
        $this->container['end_border_size'] = isset($data['end_border_size']) ? $data['end_border_size'] : null;
        $this->container['end_border_space'] = isset($data['end_border_space']) ? $data['end_border_space'] : null;
        $this->container['end_border_color'] = isset($data['end_border_color']) ? $data['end_border_color'] : null;
        $this->container['table_indentation_mode'] = isset($data['table_indentation_mode']) ? $data['table_indentation_mode'] : null;
        $this->container['table_indentation_width'] = isset($data['table_indentation_width']) ? $data['table_indentation_width'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets table_id
     *
     * @return string
     */
    public function getTableId()
    {
        return $this->container['table_id'];
    }

    /**
     * Sets table_id
     *
     * @param string $table_id The ID of the table; leave blank for new tables
     *
     * @return $this
     */
    public function setTableId($table_id)
    {
        $this->container['table_id'] = $table_id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The Path of the location of this table object; leave blank for new tables
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width The Width of the table, or 0 if not specified
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets width_type
     *
     * @return string
     */
    public function getWidthType()
    {
        return $this->container['width_type'];
    }

    /**
     * Sets width_type
     *
     * @param string $width_type The Width configuration type of the table
     *
     * @return $this
     */
    public function setWidthType($width_type)
    {
        $this->container['width_type'] = $width_type;

        return $this;
    }

    /**
     * Gets table_rows
     *
     * @return \Swagger\Client\Model\DocxTableRow[]
     */
    public function getTableRows()
    {
        return $this->container['table_rows'];
    }

    /**
     * Sets table_rows
     *
     * @param \Swagger\Client\Model\DocxTableRow[] $table_rows Rows in the table; this is where the contents is located
     *
     * @return $this
     */
    public function setTableRows($table_rows)
    {
        $this->container['table_rows'] = $table_rows;

        return $this;
    }

    /**
     * Gets top_border_type
     *
     * @return string
     */
    public function getTopBorderType()
    {
        return $this->container['top_border_type'];
    }

    /**
     * Sets top_border_type
     *
     * @param string $top_border_type Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setTopBorderType($top_border_type)
    {
        $this->container['top_border_type'] = $top_border_type;

        return $this;
    }

    /**
     * Gets top_border_size
     *
     * @return int
     */
    public function getTopBorderSize()
    {
        return $this->container['top_border_size'];
    }

    /**
     * Sets top_border_size
     *
     * @param int $top_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setTopBorderSize($top_border_size)
    {
        $this->container['top_border_size'] = $top_border_size;

        return $this;
    }

    /**
     * Gets top_border_space
     *
     * @return int
     */
    public function getTopBorderSpace()
    {
        return $this->container['top_border_space'];
    }

    /**
     * Sets top_border_space
     *
     * @param int $top_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setTopBorderSpace($top_border_space)
    {
        $this->container['top_border_space'] = $top_border_space;

        return $this;
    }

    /**
     * Gets top_border_color
     *
     * @return string
     */
    public function getTopBorderColor()
    {
        return $this->container['top_border_color'];
    }

    /**
     * Sets top_border_color
     *
     * @param string $top_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setTopBorderColor($top_border_color)
    {
        $this->container['top_border_color'] = $top_border_color;

        return $this;
    }

    /**
     * Gets bottom_border_type
     *
     * @return string
     */
    public function getBottomBorderType()
    {
        return $this->container['bottom_border_type'];
    }

    /**
     * Sets bottom_border_type
     *
     * @param string $bottom_border_type Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setBottomBorderType($bottom_border_type)
    {
        $this->container['bottom_border_type'] = $bottom_border_type;

        return $this;
    }

    /**
     * Gets bottom_border_size
     *
     * @return int
     */
    public function getBottomBorderSize()
    {
        return $this->container['bottom_border_size'];
    }

    /**
     * Sets bottom_border_size
     *
     * @param int $bottom_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setBottomBorderSize($bottom_border_size)
    {
        $this->container['bottom_border_size'] = $bottom_border_size;

        return $this;
    }

    /**
     * Gets bottom_border_space
     *
     * @return int
     */
    public function getBottomBorderSpace()
    {
        return $this->container['bottom_border_space'];
    }

    /**
     * Sets bottom_border_space
     *
     * @param int $bottom_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setBottomBorderSpace($bottom_border_space)
    {
        $this->container['bottom_border_space'] = $bottom_border_space;

        return $this;
    }

    /**
     * Gets bottom_border_color
     *
     * @return string
     */
    public function getBottomBorderColor()
    {
        return $this->container['bottom_border_color'];
    }

    /**
     * Sets bottom_border_color
     *
     * @param string $bottom_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setBottomBorderColor($bottom_border_color)
    {
        $this->container['bottom_border_color'] = $bottom_border_color;

        return $this;
    }

    /**
     * Gets left_border_type
     *
     * @return string
     */
    public function getLeftBorderType()
    {
        return $this->container['left_border_type'];
    }

    /**
     * Sets left_border_type
     *
     * @param string $left_border_type Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setLeftBorderType($left_border_type)
    {
        $this->container['left_border_type'] = $left_border_type;

        return $this;
    }

    /**
     * Gets left_border_size
     *
     * @return int
     */
    public function getLeftBorderSize()
    {
        return $this->container['left_border_size'];
    }

    /**
     * Sets left_border_size
     *
     * @param int $left_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setLeftBorderSize($left_border_size)
    {
        $this->container['left_border_size'] = $left_border_size;

        return $this;
    }

    /**
     * Gets left_border_space
     *
     * @return int
     */
    public function getLeftBorderSpace()
    {
        return $this->container['left_border_space'];
    }

    /**
     * Sets left_border_space
     *
     * @param int $left_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setLeftBorderSpace($left_border_space)
    {
        $this->container['left_border_space'] = $left_border_space;

        return $this;
    }

    /**
     * Gets left_border_color
     *
     * @return string
     */
    public function getLeftBorderColor()
    {
        return $this->container['left_border_color'];
    }

    /**
     * Sets left_border_color
     *
     * @param string $left_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setLeftBorderColor($left_border_color)
    {
        $this->container['left_border_color'] = $left_border_color;

        return $this;
    }

    /**
     * Gets right_border_type
     *
     * @return string
     */
    public function getRightBorderType()
    {
        return $this->container['right_border_type'];
    }

    /**
     * Sets right_border_type
     *
     * @param string $right_border_type Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setRightBorderType($right_border_type)
    {
        $this->container['right_border_type'] = $right_border_type;

        return $this;
    }

    /**
     * Gets right_border_size
     *
     * @return int
     */
    public function getRightBorderSize()
    {
        return $this->container['right_border_size'];
    }

    /**
     * Sets right_border_size
     *
     * @param int $right_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setRightBorderSize($right_border_size)
    {
        $this->container['right_border_size'] = $right_border_size;

        return $this;
    }

    /**
     * Gets right_border_space
     *
     * @return int
     */
    public function getRightBorderSpace()
    {
        return $this->container['right_border_space'];
    }

    /**
     * Sets right_border_space
     *
     * @param int $right_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setRightBorderSpace($right_border_space)
    {
        $this->container['right_border_space'] = $right_border_space;

        return $this;
    }

    /**
     * Gets right_border_color
     *
     * @return string
     */
    public function getRightBorderColor()
    {
        return $this->container['right_border_color'];
    }

    /**
     * Sets right_border_color
     *
     * @param string $right_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setRightBorderColor($right_border_color)
    {
        $this->container['right_border_color'] = $right_border_color;

        return $this;
    }

    /**
     * Gets cell_horizontal_border_type
     *
     * @return string
     */
    public function getCellHorizontalBorderType()
    {
        return $this->container['cell_horizontal_border_type'];
    }

    /**
     * Sets cell_horizontal_border_type
     *
     * @param string $cell_horizontal_border_type Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setCellHorizontalBorderType($cell_horizontal_border_type)
    {
        $this->container['cell_horizontal_border_type'] = $cell_horizontal_border_type;

        return $this;
    }

    /**
     * Gets cell_horizontal_border_size
     *
     * @return int
     */
    public function getCellHorizontalBorderSize()
    {
        return $this->container['cell_horizontal_border_size'];
    }

    /**
     * Sets cell_horizontal_border_size
     *
     * @param int $cell_horizontal_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setCellHorizontalBorderSize($cell_horizontal_border_size)
    {
        $this->container['cell_horizontal_border_size'] = $cell_horizontal_border_size;

        return $this;
    }

    /**
     * Gets cell_horizontal_border_space
     *
     * @return int
     */
    public function getCellHorizontalBorderSpace()
    {
        return $this->container['cell_horizontal_border_space'];
    }

    /**
     * Sets cell_horizontal_border_space
     *
     * @param int $cell_horizontal_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setCellHorizontalBorderSpace($cell_horizontal_border_space)
    {
        $this->container['cell_horizontal_border_space'] = $cell_horizontal_border_space;

        return $this;
    }

    /**
     * Gets cell_horizontal_border_color
     *
     * @return string
     */
    public function getCellHorizontalBorderColor()
    {
        return $this->container['cell_horizontal_border_color'];
    }

    /**
     * Sets cell_horizontal_border_color
     *
     * @param string $cell_horizontal_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setCellHorizontalBorderColor($cell_horizontal_border_color)
    {
        $this->container['cell_horizontal_border_color'] = $cell_horizontal_border_color;

        return $this;
    }

    /**
     * Gets cell_vertical_border_type
     *
     * @return string
     */
    public function getCellVerticalBorderType()
    {
        return $this->container['cell_vertical_border_type'];
    }

    /**
     * Sets cell_vertical_border_type
     *
     * @param string $cell_vertical_border_type Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setCellVerticalBorderType($cell_vertical_border_type)
    {
        $this->container['cell_vertical_border_type'] = $cell_vertical_border_type;

        return $this;
    }

    /**
     * Gets cell_vertical_border_size
     *
     * @return int
     */
    public function getCellVerticalBorderSize()
    {
        return $this->container['cell_vertical_border_size'];
    }

    /**
     * Sets cell_vertical_border_size
     *
     * @param int $cell_vertical_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setCellVerticalBorderSize($cell_vertical_border_size)
    {
        $this->container['cell_vertical_border_size'] = $cell_vertical_border_size;

        return $this;
    }

    /**
     * Gets cell_vertical_border_space
     *
     * @return int
     */
    public function getCellVerticalBorderSpace()
    {
        return $this->container['cell_vertical_border_space'];
    }

    /**
     * Sets cell_vertical_border_space
     *
     * @param int $cell_vertical_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setCellVerticalBorderSpace($cell_vertical_border_space)
    {
        $this->container['cell_vertical_border_space'] = $cell_vertical_border_space;

        return $this;
    }

    /**
     * Gets cell_vertical_border_color
     *
     * @return string
     */
    public function getCellVerticalBorderColor()
    {
        return $this->container['cell_vertical_border_color'];
    }

    /**
     * Sets cell_vertical_border_color
     *
     * @param string $cell_vertical_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setCellVerticalBorderColor($cell_vertical_border_color)
    {
        $this->container['cell_vertical_border_color'] = $cell_vertical_border_color;

        return $this;
    }

    /**
     * Gets start_border_type
     *
     * @return string
     */
    public function getStartBorderType()
    {
        return $this->container['start_border_type'];
    }

    /**
     * Sets start_border_type
     *
     * @param string $start_border_type Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setStartBorderType($start_border_type)
    {
        $this->container['start_border_type'] = $start_border_type;

        return $this;
    }

    /**
     * Gets start_border_size
     *
     * @return int
     */
    public function getStartBorderSize()
    {
        return $this->container['start_border_size'];
    }

    /**
     * Sets start_border_size
     *
     * @param int $start_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setStartBorderSize($start_border_size)
    {
        $this->container['start_border_size'] = $start_border_size;

        return $this;
    }

    /**
     * Gets start_border_space
     *
     * @return int
     */
    public function getStartBorderSpace()
    {
        return $this->container['start_border_space'];
    }

    /**
     * Sets start_border_space
     *
     * @param int $start_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setStartBorderSpace($start_border_space)
    {
        $this->container['start_border_space'] = $start_border_space;

        return $this;
    }

    /**
     * Gets start_border_color
     *
     * @return string
     */
    public function getStartBorderColor()
    {
        return $this->container['start_border_color'];
    }

    /**
     * Sets start_border_color
     *
     * @param string $start_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setStartBorderColor($start_border_color)
    {
        $this->container['start_border_color'] = $start_border_color;

        return $this;
    }

    /**
     * Gets end_border_type
     *
     * @return string
     */
    public function getEndBorderType()
    {
        return $this->container['end_border_type'];
    }

    /**
     * Sets end_border_type
     *
     * @param string $end_border_type Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
     *
     * @return $this
     */
    public function setEndBorderType($end_border_type)
    {
        $this->container['end_border_type'] = $end_border_type;

        return $this;
    }

    /**
     * Gets end_border_size
     *
     * @return int
     */
    public function getEndBorderSize()
    {
        return $this->container['end_border_size'];
    }

    /**
     * Sets end_border_size
     *
     * @param int $end_border_size Width of the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setEndBorderSize($end_border_size)
    {
        $this->container['end_border_size'] = $end_border_size;

        return $this;
    }

    /**
     * Gets end_border_space
     *
     * @return int
     */
    public function getEndBorderSpace()
    {
        return $this->container['end_border_space'];
    }

    /**
     * Sets end_border_space
     *
     * @param int $end_border_space Spacing around the border in points (1/72nd of an inch)
     *
     * @return $this
     */
    public function setEndBorderSpace($end_border_space)
    {
        $this->container['end_border_space'] = $end_border_space;

        return $this;
    }

    /**
     * Gets end_border_color
     *
     * @return string
     */
    public function getEndBorderColor()
    {
        return $this->container['end_border_color'];
    }

    /**
     * Sets end_border_color
     *
     * @param string $end_border_color HTML-style color hex value (do not include a #)
     *
     * @return $this
     */
    public function setEndBorderColor($end_border_color)
    {
        $this->container['end_border_color'] = $end_border_color;

        return $this;
    }

    /**
     * Gets table_indentation_mode
     *
     * @return string
     */
    public function getTableIndentationMode()
    {
        return $this->container['table_indentation_mode'];
    }

    /**
     * Sets table_indentation_mode
     *
     * @param string $table_indentation_mode Table indentation type
     *
     * @return $this
     */
    public function setTableIndentationMode($table_indentation_mode)
    {
        $this->container['table_indentation_mode'] = $table_indentation_mode;

        return $this;
    }

    /**
     * Gets table_indentation_width
     *
     * @return int
     */
    public function getTableIndentationWidth()
    {
        return $this->container['table_indentation_width'];
    }

    /**
     * Sets table_indentation_width
     *
     * @param int $table_indentation_width Table indentation width
     *
     * @return $this
     */
    public function setTableIndentationWidth($table_indentation_width)
    {
        $this->container['table_indentation_width'] = $table_indentation_width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


