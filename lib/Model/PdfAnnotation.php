<?php
/**
 * PdfAnnotation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PdfAnnotation Class Doc Comment
 *
 * @category Class
 * @description PDF Annotation details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PdfAnnotation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PdfAnnotation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
        'annotation_type' => 'string',
        'page_number' => 'int',
        'annotation_index' => 'int',
        'subject' => 'string',
        'text_contents' => 'string',
        'creation_date' => '\DateTime',
        'modified_date' => '\DateTime',
        'left_x' => 'double',
        'top_y' => 'double',
        'width' => 'double',
        'height' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
        'annotation_type' => null,
        'page_number' => 'int32',
        'annotation_index' => 'int32',
        'subject' => null,
        'text_contents' => null,
        'creation_date' => 'date-time',
        'modified_date' => 'date-time',
        'left_x' => 'double',
        'top_y' => 'double',
        'width' => 'double',
        'height' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'Title',
        'annotation_type' => 'AnnotationType',
        'page_number' => 'PageNumber',
        'annotation_index' => 'AnnotationIndex',
        'subject' => 'Subject',
        'text_contents' => 'TextContents',
        'creation_date' => 'CreationDate',
        'modified_date' => 'ModifiedDate',
        'left_x' => 'LeftX',
        'top_y' => 'TopY',
        'width' => 'Width',
        'height' => 'Height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'annotation_type' => 'setAnnotationType',
        'page_number' => 'setPageNumber',
        'annotation_index' => 'setAnnotationIndex',
        'subject' => 'setSubject',
        'text_contents' => 'setTextContents',
        'creation_date' => 'setCreationDate',
        'modified_date' => 'setModifiedDate',
        'left_x' => 'setLeftX',
        'top_y' => 'setTopY',
        'width' => 'setWidth',
        'height' => 'setHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'annotation_type' => 'getAnnotationType',
        'page_number' => 'getPageNumber',
        'annotation_index' => 'getAnnotationIndex',
        'subject' => 'getSubject',
        'text_contents' => 'getTextContents',
        'creation_date' => 'getCreationDate',
        'modified_date' => 'getModifiedDate',
        'left_x' => 'getLeftX',
        'top_y' => 'getTopY',
        'width' => 'getWidth',
        'height' => 'getHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['annotation_type'] = isset($data['annotation_type']) ? $data['annotation_type'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['annotation_index'] = isset($data['annotation_index']) ? $data['annotation_index'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['text_contents'] = isset($data['text_contents']) ? $data['text_contents'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['left_x'] = isset($data['left_x']) ? $data['left_x'] : null;
        $this->container['top_y'] = isset($data['top_y']) ? $data['top_y'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the annotation; this is often the author of the annotation in Acrobat-created PDF files
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets annotation_type
     *
     * @return string
     */
    public function getAnnotationType()
    {
        return $this->container['annotation_type'];
    }

    /**
     * Sets annotation_type
     *
     * @param string $annotation_type Type of the annotation; possible values are Text
     *
     * @return $this
     */
    public function setAnnotationType($annotation_type)
    {
        $this->container['annotation_type'] = $annotation_type;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number The 1-based index of the page containing the annotation
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets annotation_index
     *
     * @return int
     */
    public function getAnnotationIndex()
    {
        return $this->container['annotation_index'];
    }

    /**
     * Sets annotation_index
     *
     * @param int $annotation_index The 0-based index of the annotation in the document
     *
     * @return $this
     */
    public function setAnnotationIndex($annotation_index)
    {
        $this->container['annotation_index'] = $annotation_index;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the annotation
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets text_contents
     *
     * @return string
     */
    public function getTextContents()
    {
        return $this->container['text_contents'];
    }

    /**
     * Sets text_contents
     *
     * @param string $text_contents Text contents of the annotation
     *
     * @return $this
     */
    public function setTextContents($text_contents)
    {
        $this->container['text_contents'] = $text_contents;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Date that the annotation was created
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date Date that the annotation was last modified
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets left_x
     *
     * @return double
     */
    public function getLeftX()
    {
        return $this->container['left_x'];
    }

    /**
     * Sets left_x
     *
     * @param double $left_x Left X coordinate for the location of the annotation
     *
     * @return $this
     */
    public function setLeftX($left_x)
    {
        $this->container['left_x'] = $left_x;

        return $this;
    }

    /**
     * Gets top_y
     *
     * @return double
     */
    public function getTopY()
    {
        return $this->container['top_y'];
    }

    /**
     * Sets top_y
     *
     * @param double $top_y Top Y coordination of the location of the annotation
     *
     * @return $this
     */
    public function setTopY($top_y)
    {
        $this->container['top_y'] = $top_y;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width Width of the annotation
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height Height of the annotation
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


