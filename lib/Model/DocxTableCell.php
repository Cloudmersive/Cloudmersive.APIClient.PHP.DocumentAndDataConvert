<?php
/**
 * DocxTableCell
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocxTableCell Class Doc Comment
 *
 * @category Class
 * @description A cell in a Word Document (DOCX) file
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocxTableCell implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocxTableCell';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cell_index' => 'int',
        'path' => 'string',
        'paragraphs' => '\Swagger\Client\Model\DocxParagraph[]',
        'cell_shading_color' => 'string',
        'cell_shading_fill' => 'string',
        'cell_shading_pattern' => 'string',
        'cell_width_mode' => 'string',
        'cell_width' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cell_index' => 'int32',
        'path' => null,
        'paragraphs' => null,
        'cell_shading_color' => null,
        'cell_shading_fill' => null,
        'cell_shading_pattern' => null,
        'cell_width_mode' => null,
        'cell_width' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cell_index' => 'CellIndex',
        'path' => 'Path',
        'paragraphs' => 'Paragraphs',
        'cell_shading_color' => 'CellShadingColor',
        'cell_shading_fill' => 'CellShadingFill',
        'cell_shading_pattern' => 'CellShadingPattern',
        'cell_width_mode' => 'CellWidthMode',
        'cell_width' => 'CellWidth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cell_index' => 'setCellIndex',
        'path' => 'setPath',
        'paragraphs' => 'setParagraphs',
        'cell_shading_color' => 'setCellShadingColor',
        'cell_shading_fill' => 'setCellShadingFill',
        'cell_shading_pattern' => 'setCellShadingPattern',
        'cell_width_mode' => 'setCellWidthMode',
        'cell_width' => 'setCellWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cell_index' => 'getCellIndex',
        'path' => 'getPath',
        'paragraphs' => 'getParagraphs',
        'cell_shading_color' => 'getCellShadingColor',
        'cell_shading_fill' => 'getCellShadingFill',
        'cell_shading_pattern' => 'getCellShadingPattern',
        'cell_width_mode' => 'getCellWidthMode',
        'cell_width' => 'getCellWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cell_index'] = isset($data['cell_index']) ? $data['cell_index'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['paragraphs'] = isset($data['paragraphs']) ? $data['paragraphs'] : null;
        $this->container['cell_shading_color'] = isset($data['cell_shading_color']) ? $data['cell_shading_color'] : null;
        $this->container['cell_shading_fill'] = isset($data['cell_shading_fill']) ? $data['cell_shading_fill'] : null;
        $this->container['cell_shading_pattern'] = isset($data['cell_shading_pattern']) ? $data['cell_shading_pattern'] : null;
        $this->container['cell_width_mode'] = isset($data['cell_width_mode']) ? $data['cell_width_mode'] : null;
        $this->container['cell_width'] = isset($data['cell_width']) ? $data['cell_width'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cell_index
     *
     * @return int
     */
    public function getCellIndex()
    {
        return $this->container['cell_index'];
    }

    /**
     * Sets cell_index
     *
     * @param int $cell_index The index of the cell, 0-based
     *
     * @return $this
     */
    public function setCellIndex($cell_index)
    {
        $this->container['cell_index'] = $cell_index;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The Path of the location of this object; leave blank for new tables
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets paragraphs
     *
     * @return \Swagger\Client\Model\DocxParagraph[]
     */
    public function getParagraphs()
    {
        return $this->container['paragraphs'];
    }

    /**
     * Sets paragraphs
     *
     * @param \Swagger\Client\Model\DocxParagraph[] $paragraphs Paragraphs inside the cell; this is where the contents of the cell are stored
     *
     * @return $this
     */
    public function setParagraphs($paragraphs)
    {
        $this->container['paragraphs'] = $paragraphs;

        return $this;
    }

    /**
     * Gets cell_shading_color
     *
     * @return string
     */
    public function getCellShadingColor()
    {
        return $this->container['cell_shading_color'];
    }

    /**
     * Sets cell_shading_color
     *
     * @param string $cell_shading_color Color of the cell shading
     *
     * @return $this
     */
    public function setCellShadingColor($cell_shading_color)
    {
        $this->container['cell_shading_color'] = $cell_shading_color;

        return $this;
    }

    /**
     * Gets cell_shading_fill
     *
     * @return string
     */
    public function getCellShadingFill()
    {
        return $this->container['cell_shading_fill'];
    }

    /**
     * Sets cell_shading_fill
     *
     * @param string $cell_shading_fill Fill of the cell shading
     *
     * @return $this
     */
    public function setCellShadingFill($cell_shading_fill)
    {
        $this->container['cell_shading_fill'] = $cell_shading_fill;

        return $this;
    }

    /**
     * Gets cell_shading_pattern
     *
     * @return string
     */
    public function getCellShadingPattern()
    {
        return $this->container['cell_shading_pattern'];
    }

    /**
     * Sets cell_shading_pattern
     *
     * @param string $cell_shading_pattern Pattern of the cell shading
     *
     * @return $this
     */
    public function setCellShadingPattern($cell_shading_pattern)
    {
        $this->container['cell_shading_pattern'] = $cell_shading_pattern;

        return $this;
    }

    /**
     * Gets cell_width_mode
     *
     * @return string
     */
    public function getCellWidthMode()
    {
        return $this->container['cell_width_mode'];
    }

    /**
     * Sets cell_width_mode
     *
     * @param string $cell_width_mode Width mode of the cell; can be auto (for automatic) or manual
     *
     * @return $this
     */
    public function setCellWidthMode($cell_width_mode)
    {
        $this->container['cell_width_mode'] = $cell_width_mode;

        return $this;
    }

    /**
     * Gets cell_width
     *
     * @return string
     */
    public function getCellWidth()
    {
        return $this->container['cell_width'];
    }

    /**
     * Sets cell_width
     *
     * @param string $cell_width Width of the cell
     *
     * @return $this
     */
    public function setCellWidth($cell_width)
    {
        $this->container['cell_width'] = $cell_width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


